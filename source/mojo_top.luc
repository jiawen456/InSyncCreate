module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    input start_button,
    input reset_button,
    output io_led [25],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal      
  sig out_temp[25];      
  
  .clk(clk) {
    reset_conditioner reset_cond;
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    
    .rst(rst) {
      processor processor;
      counter seven_seg_ctr(#SIZE(2),#DIV(18));
    }
  }
  
  
  always {
  
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 25b0;    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits2][6];    
  
    processor.button = io_button;
    processor.start_button = start_button;
    processor.reset_button = reset_button;
    
    processor.button = io_button;
    
    out_temp = processor.out;
    
    io_led = out_temp;
    
    //io_led[0] = out_temp[7:0];
    //io_led[1] = out_temp[15:8];
    //io_led[2] = out_temp[23:16];
    //led[0] = out_temp[24];
    
    case(seven_seg_ctr.value){
      0:
        io_seg = processor.display_seg0; 
        io_sel = 4b1;
      1: 
        io_seg= processor.display_seg1;
        io_sel = 4b10;
      2:
        io_seg = processor.display_seg2;          
        io_sel = 4b100;
      3: 
        io_seg= processor.display_seg3;
        io_sel = 4b1000;
      default:
        io_seg= processor.display_seg0;
        io_sel = 4b1;                
    }
       
  }     
}
  