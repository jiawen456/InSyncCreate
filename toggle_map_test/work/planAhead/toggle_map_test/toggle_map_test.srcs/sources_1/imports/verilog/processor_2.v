/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module processor_2 (
    input clk,
    input rst,
    input [4:0] button,
    output reg [24:0] out
  );
  
  
  
  reg [4:0] pos;
  
  reg completed;
  
  reg [24:0] out_temp;
  
  wire [1-1:0] M_left_btn_out;
  reg [1-1:0] M_left_btn_in;
  edge_detector_3 left_btn (
    .clk(clk),
    .in(M_left_btn_in),
    .out(M_left_btn_out)
  );
  wire [1-1:0] M_left_btn_cond_out;
  reg [1-1:0] M_left_btn_cond_in;
  button_conditioner_4 left_btn_cond (
    .clk(clk),
    .in(M_left_btn_cond_in),
    .out(M_left_btn_cond_out)
  );
  wire [1-1:0] M_right_btn_out;
  reg [1-1:0] M_right_btn_in;
  edge_detector_3 right_btn (
    .clk(clk),
    .in(M_right_btn_in),
    .out(M_right_btn_out)
  );
  wire [1-1:0] M_right_btn_cond_out;
  reg [1-1:0] M_right_btn_cond_in;
  button_conditioner_4 right_btn_cond (
    .clk(clk),
    .in(M_right_btn_cond_in),
    .out(M_right_btn_cond_out)
  );
  wire [1-1:0] M_up_btn_out;
  reg [1-1:0] M_up_btn_in;
  edge_detector_3 up_btn (
    .clk(clk),
    .in(M_up_btn_in),
    .out(M_up_btn_out)
  );
  wire [1-1:0] M_up_btn_cond_out;
  reg [1-1:0] M_up_btn_cond_in;
  button_conditioner_4 up_btn_cond (
    .clk(clk),
    .in(M_up_btn_cond_in),
    .out(M_up_btn_cond_out)
  );
  wire [1-1:0] M_down_btn_out;
  reg [1-1:0] M_down_btn_in;
  edge_detector_3 down_btn (
    .clk(clk),
    .in(M_down_btn_in),
    .out(M_down_btn_out)
  );
  wire [1-1:0] M_down_btn_cond_out;
  reg [1-1:0] M_down_btn_cond_in;
  button_conditioner_4 down_btn_cond (
    .clk(clk),
    .in(M_down_btn_cond_in),
    .out(M_down_btn_cond_out)
  );
  wire [1-1:0] M_enter_btn_out;
  reg [1-1:0] M_enter_btn_in;
  edge_detector_3 enter_btn (
    .clk(clk),
    .in(M_enter_btn_in),
    .out(M_enter_btn_out)
  );
  wire [1-1:0] M_enter_btn_cond_out;
  reg [1-1:0] M_enter_btn_cond_in;
  button_conditioner_4 enter_btn_cond (
    .clk(clk),
    .in(M_enter_btn_cond_in),
    .out(M_enter_btn_cond_out)
  );
  reg [24:0] M_blink_d, M_blink_q = 1'h0;
  reg [24:0] M_current_cursor_d, M_current_cursor_q = 25'h0000001;
  reg [24:0] M_next_cursor_d, M_next_cursor_q = 25'h0000001;
  reg [1:0] M_direction_d, M_direction_q = 1'h0;
  reg [24:0] M_current_map_d, M_current_map_q = 1'h0;
  localparam IDLE_state = 2'd0;
  localparam PLAYING_state = 2'd1;
  localparam SHIFT_state = 2'd2;
  localparam TOGGLE_state = 2'd3;
  
  reg [1:0] M_state_d, M_state_q = IDLE_state;
  wire [25-1:0] M_shift_cursor_out;
  reg [2-1:0] M_shift_cursor_direction;
  reg [25-1:0] M_shift_cursor_cursor;
  shift_cursor_13 shift_cursor (
    .clk(clk),
    .rst(rst),
    .direction(M_shift_cursor_direction),
    .cursor(M_shift_cursor_cursor),
    .out(M_shift_cursor_out)
  );
  wire [25-1:0] M_toggle_map_out;
  wire [1-1:0] M_toggle_map_completed;
  reg [25-1:0] M_toggle_map_cursor;
  reg [25-1:0] M_toggle_map_map;
  toggle_map_14 toggle_map (
    .clk(clk),
    .rst(rst),
    .cursor(M_toggle_map_cursor),
    .map(M_toggle_map_map),
    .out(M_toggle_map_out),
    .completed(M_toggle_map_completed)
  );
  
  wire [5-1:0] M_get_position_pos;
  reg [25-1:0] M_get_position_cursor;
  get_position_15 get_position (
    .cursor(M_get_position_cursor),
    .pos(M_get_position_pos)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_next_cursor_d = M_next_cursor_q;
    M_blink_d = M_blink_q;
    M_direction_d = M_direction_q;
    M_current_cursor_d = M_current_cursor_q;
    M_current_map_d = M_current_map_q;
    
    M_left_btn_cond_in = button[3+0-:1];
    M_left_btn_in = M_left_btn_cond_out;
    M_right_btn_cond_in = button[4+0-:1];
    M_right_btn_in = M_right_btn_cond_out;
    M_up_btn_cond_in = button[0+0-:1];
    M_up_btn_in = M_up_btn_cond_out;
    M_down_btn_cond_in = button[2+0-:1];
    M_down_btn_in = M_down_btn_cond_out;
    M_enter_btn_cond_in = button[1+0-:1];
    M_enter_btn_in = M_enter_btn_cond_out;
    M_direction_d = M_direction_q;
    M_current_cursor_d = M_current_cursor_q;
    M_current_map_d = M_current_map_q;
    M_next_cursor_d = M_next_cursor_q;
    M_state_d = M_state_q;
    M_shift_cursor_direction = M_direction_q;
    M_shift_cursor_cursor = M_current_cursor_q;
    M_toggle_map_map = M_current_map_q;
    M_toggle_map_cursor = M_current_cursor_q;
    out_temp = 25'h0000000;
    
    case (M_state_q)
      IDLE_state: begin
        M_current_map_d = 25'h00002aa;
        if (M_enter_btn_out) begin
          M_state_d = PLAYING_state;
        end
      end
      PLAYING_state: begin
        M_current_cursor_d = M_next_cursor_q;
        out_temp = M_current_cursor_q;
        if (M_up_btn_out) begin
          M_direction_d = 2'h0;
          M_state_d = SHIFT_state;
        end
        if (M_down_btn_out) begin
          M_direction_d = 2'h1;
          M_state_d = SHIFT_state;
        end
        if (M_left_btn_out) begin
          M_direction_d = 2'h2;
          M_state_d = SHIFT_state;
        end
        if (M_right_btn_out) begin
          M_direction_d = 2'h3;
          M_state_d = SHIFT_state;
        end
        if (M_enter_btn_out) begin
          M_state_d = TOGGLE_state;
        end
      end
      SHIFT_state: begin
        out_temp = M_shift_cursor_out;
        M_next_cursor_d = out_temp;
        M_state_d = PLAYING_state;
      end
      TOGGLE_state: begin
        M_current_map_d = M_toggle_map_out;
        M_state_d = PLAYING_state;
      end
    endcase
    M_blink_d = M_blink_q + 1'h1;
    M_get_position_cursor = out_temp;
    pos = M_get_position_pos;
    out = M_current_map_q;
    out[(pos)*1+0-:1] = M_blink_q[24+0-:1];
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_blink_q <= 1'h0;
      M_current_cursor_q <= 25'h0000001;
      M_next_cursor_q <= 25'h0000001;
      M_direction_q <= 1'h0;
      M_current_map_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_blink_q <= M_blink_d;
      M_current_cursor_q <= M_current_cursor_d;
      M_next_cursor_q <= M_next_cursor_d;
      M_direction_q <= M_direction_d;
      M_current_map_q <= M_current_map_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
